<html>
<head>
  <title>Displacement Map</title>
  <style>
                body {
                        font-family: Helvetica, Arial, sans-serif;
                }
                img {
                        display: none;
                }
                .hidden {
                        display: none;
                }
                canvas {
                        width: 100%;
                        height: 50%;
                }
  </style>
</head>
<body>
  <img crossorigin='anonymous' id="img-map" width="2048" height="1024" src="https://freeali.se/panoramera/examples/basic/f0_dmap_blur.png">

  <h3>To see the displacement map, change the scaleX and scaleY
  value in the controls window.</h3><img crossorigin='anonymous' id="img-source" src=
  "https://freeali.se/panoramera/examples/basic/f0.jpg">
  <canvas id="source" class="hidden" width="2048" height="1024">
  </canvas>
  <canvas id="canvas" width="2048" height="1024"></canvas>
  <canvas id="map" class="shidden" width="2048" height="1024">
  </canvas>
  <script src="https://cdn.jsdelivr.net/npm/dat.gui@0.7.9/build/dat.gui.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script>
    
var filters = {} || filters;
(function() { 
  filters.ColorChannel = { RED: 0, GREEN: 1, BLUE: 2, ALPHA: 3 }; 
  filters.Point = function(x, y) { 
    this.x = x || 0; 
    this.y = y || 0; 
  };
  filters.DisplacementMap = function(source, map, target, point,
  scaleX, scaleY, channelX, channelY) { 
    this.source = source;
    this.map = map; 
    this.target = target; 
    this.sourceCtx = this.source.getContext("2d"); 
    this.mapCtx = this.map.getContext("2d"); 
    this.targetCtx = this.target.getContext("2d"); 

    this.point = point || new filters.Point(); 
    this.scaleX = scaleX || 0;
    this.scaleY = scaleY || 0; 
    this.channelX = channelX || filters.ColorChannel.RED; 
    this.channelY = channelY || filters.ColorChannel.ALPHA; 
    if (this.channelX != 0 && this.channelX != 1 && this.channelX != 2 && this.channelX != 3) {
      this.channelX = filters.ColorChannel.RED; 
    }
    if (this.channelY != 0 && this.channelY != 1 && this.channelY != 2 && this.channelY != 3) {
      this.channelY = filters.ColorChannel.ALPHA; 
    };
    var p = filters.DisplacementMap.prototype; 
    p.draw = function() {
      var sourceData = this.sourceCtx.getImageData(0, 0, this.source.width, this.source.height); 
      var mapData = this.mapCtx.getImageData(0, 0, this.map.width, this.map.height);
      var targetDataX = this.sourceCtx.getImageData(0, 0, this.source.width, this.source.height); 
      var targetDataY = this.sourceCtx.getImageData(0, 0, this.source.width, this.source.height); 
      var pixelsLength = mapData.data.length / 4;
      var colorValue, alphaValue, ratio, ratioWithAlpha, pixelShift,
  sourcePosition, targetPosition, x, y;
      var i = 0; 
      while(i < pixelsLength) { 
        x = ((i % this.map.width) + this.point.x) | 0; 
        y = (((i / this.map.width) | 0) + this.point.y) | 0; 
        colorValue = mapData.data[i*4+this.channelX]; 
        alphaValue = mapData.data[i*4+filters.ColorChannel.ALPHA]; 
        ratio = (colorValue / 0xFF * 2) -1; 
        ratioWithAlpha = ratio * (alphaValue / 0xFF);
        pixelShift = (ratioWithAlpha * this.scaleX | 0); 
        sourcePosition = (this.source.width * y) + x; 
        targetPosition = (this.target.width * y) + x + pixelShift;
        this.setPixels(targetDataX, targetPosition, sourceData, sourcePosition); 
        i++; 
      } 
      i = 0;
      while(i < pixelsLength) { 
        x = ((i % this.map.width) + this.point.x) | 0; 
        y = (((i / this.map.width) | 0) + this.point.y) | 0; 
        colorValue = mapData.data[i*4+this.channelY];
        alphaValue = mapData.data[i*4+filters.ColorChannel.ALPHA]; 
        ratio = (colorValue / 0xFF * 2) -1; 
        ratioWithAlpha = ratio * (alphaValue / 0xFF); 
        pixelShift = (ratioWithAlpha * this.scaleY | 0); 
        sourcePosition = (this.source.width * y) + x; 
        targetPosition = (this.target.width * (y + pixelShift)) + x;
        this.setPixels(targetDataY, targetPosition, targetDataX,
  sourcePosition); 
        i++; 
      } 
      this.targetCtx.putImageData(targetDataY, 0, 0); 
    }; 
    p.setPixels = function(target, pos, source, i, s) {
        target.data[i*4] = source.data[pos*4]; 
        target.data[i*4+1] = source.data[pos*4+1]; 
        target.data[i*4+2] = source.data[pos*4+2];
        target.data[i*4+3] = source.data[pos*4+3];

        source.data[pos*4] = source.data[pos*4-4];
        source.data[pos*4+1] = source.data[pos*4-4+1];
        source.data[pos*4+2] = source.data[pos*4-4+2];
        source.data[pos*4+3] = source.data[pos*4-4+3];
    }; 
  }
})();


window.onload = start; 
var imageMap = $("#img-map")[0]; 
var imageSource = $("#img-source")[0]; 
var source = $("#source")[0];
var map = $("#map")[0]; 
var canvas = $("#canvas")[0]; 
var filter, gui; 

function start() { 
  createSource(); 
  createMap();
  createFilter(); 
  createGUI(); 
  draw(canvas.getContext("2d")); 
}

function createSource() { 
  var context = source.getContext("2d");
  context.drawImage(imageSource, 0, 0, imageSource.width, imageSource.height); 
} 
function createMap() { 
  var context = map.getContext("2d");
  context.drawImage(imageMap, 0, 0, imageMap.width, imageMap.height);
} 
function RGBToCSS(r, g, b) {
  var hex = r << 16 | g << 8 | b; 
  var str = hex.toString(16); 
  while (str.length < 6) {
   str = "0" + str;
  }
  return "#" + str.toUpperCase(); 
} 
function createFilter() {
  filter = new filters.DisplacementMap(source, map, canvas); 
}
  function createGUI() { 
  gui = new dat.GUI(); 
  gui.add(filter, "scaleX", -400, 400); 
  gui.add(filter, "scaleY", -400, 400);
  gui.add(filter.point, "x", 0, 500); 
  gui.add(filter.point, "y", 0, 419); 
  gui.add(filter, "channelX", {RED:0, GREEN:1, BLUE:2, ALPHA:3}); 
  gui.add(filter, "channelY", {RED:0, GREEN:1, BLUE:2, ALPHA:3}); 
} 
function draw(ctx) { 
  filter.draw(); 
  setTimeout(draw, 1000/60, ctx); 
};

  </script>

</body>
</html>