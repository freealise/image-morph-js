<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Hello OpenCV.js</title>
</head>
<body>
<h2>Hello OpenCV.js</h2>
<p id="status">OpenCV.js is loading...</p>
<div>
 <div class="inputoutput">
 <img id="imageSrc" alt="No Image" />
 <div class="caption">imageSrc <input type="file" id="fileInput" name="file" /></div>
 <img id="imageSrc_" alt="No Image" />
 <div class="caption">imageSrc_ <input type="file" id="fileInput_" name="file" /></div>
 </div>
 <button id="submitBtn">corners</button>
 <div class="inputoutput">
 <canvas id="canvasOutput" ></canvas>
 <div class="caption">canvasOutput</div>
 </div>
</div>
<script type="text/javascript">
let imgElement = document.getElementById('imageSrc');
let inputElement = document.getElementById('fileInput');
let imgElement_ = document.getElementById('imageSrc_');
let inputElement_ = document.getElementById('fileInput_');
let submitBtn = document.getElementById('submitBtn');

inputElement.addEventListener('change', (e) => {
 imgElement.src = URL.createObjectURL(e.target.files[0]);
}, false);
inputElement_.addEventListener('change', (e) => {
 imgElement_.src = URL.createObjectURL(e.target.files[0]);
}, false);
 
submitBtn.onclick = function() {
 // parameters for ShiTomasi corner detection
 let [maxCorners, qualityLevel, minDistance, blockSize] = [10, 0.3, 7, 7];

 // parameters for lucas kanade optical flow
 let winSize = new cv.Size(15, 15);
 let maxLevel = 2;
 let criteria = new cv.TermCriteria(cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03);

 // create some random colors
 let color = [];
 for (let i = 0; i < maxCorners; i++) {
    color.push(new cv.Scalar(parseInt(Math.random()*255), parseInt(Math.random()*255),
                             parseInt(Math.random()*255), 255));
 }

 // take first frame and find corners in it
 let oldFrame = cv.imread(imgElement);
 cap.read(oldFrame);
 let oldGray = new cv.Mat();
 cv.cvtColor(oldFrame, oldGray, cv.COLOR_RGB2GRAY);
 let p0 = new cv.Mat();
 let none = new cv.Mat();
 cv.goodFeaturesToTrack(oldGray, p0, maxCorners, qualityLevel, minDistance, none, blockSize);

 // Create a mask image for drawing purposes
 let zeroEle = new cv.Scalar(0, 0, 0, 255);
 let mask = new cv.Mat(oldFrame.rows, oldFrame.cols, oldFrame.type(), zeroEle);

 let frame = cv.imread(imgElement_);
 let frameGray = new cv.Mat();
 let p1 = new cv.Mat();
 let st = new cv.Mat();
 let err = new cv.Mat();

 function processImage() {
    try {
        // start processing.
        cap.read(frame);
        cv.cvtColor(frame, frameGray, cv.COLOR_RGBA2GRAY);

        // calculate optical flow
        cv.calcOpticalFlowPyrLK(oldGray, frameGray, p0, p1, st, err, winSize, maxLevel, criteria);

        // select good points
        let goodNew = [];
        let goodOld = [];
        for (let i = 0; i < st.rows; i++) {
            if (st.data[i] === 1) {
                goodNew.push(new cv.Point(p1.data32F[i*2], p1.data32F[i*2+1]));
                goodOld.push(new cv.Point(p0.data32F[i*2], p0.data32F[i*2+1]));
            }
        }

        // draw the tracks
        for (let i = 0; i < goodNew.length; i++) {
            cv.line(mask, goodNew[i], goodOld[i], color[i], 2);
            cv.circle(frame, goodNew[i], 5, color[i], -1);
        }
        cv.add(frame, mask, frame);

        cv.imshow('canvasOutput', frame);

        // now update the previous frame and previous points
        frameGray.copyTo(oldGray);
        p0.delete(); p0 = null;
        p0 = new cv.Mat(goodNew.length, 1, cv.CV_32FC2);
        for (let i = 0; i < goodNew.length; i++) {
            p0.data32F[i*2] = goodNew[i].x;
            p0.data32F[i*2+1] = goodNew[i].y;
        }
    } catch (err) {
        alert(err);
    }
 };
 processImage();

};
 
var Module = {
 // https://emscripten.org/docs/api_reference/module.html#Module.onRuntimeInitialized
 onRuntimeInitialized() {
 document.getElementById('status').innerHTML = 'OpenCV.js is ready.';
 }
};
</script>
<script async src="opencv.js" type="text/javascript"></script>
</body>
</html>